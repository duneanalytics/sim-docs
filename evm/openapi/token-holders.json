{
  "openapi": "3.0.0",
  "info": {
    "title": "Sim APIs Token Holders API",
    "version": "v1",
    "description": "API for retrieving token holder information for a specific contract on an EVM compatible blockchain."
  },
  "servers": [
    {
      "url": "https://api.sim.dune.com",
      "description": "Sim API Server"
    }
  ],
  "components": {
    "schemas": {
      "ErrorDetail": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Description of what went wrong.",
            "example": "Invalid or missing API key"
          },
          "code": {
            "type": "string",
            "description": "Error code.",
            "example": "UNAUTHORIZED"
          }
        },
        "required": [
          "message",
          "code"
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/ErrorDetail"
          }
        },
        "required": [
          "error"
        ]
      },
      "Holder": {
        "type": "object",
        "properties": {
          "wallet_address": {
            "type": "string",
            "description": "The address of the token holder.",
            "example": "0x4a79b0168296c0ef7b8f314973b82ad406a29f1b"
          },
          "balance": {
            "type": "string",
            "description": "The raw balance of tokens held by the address, as a string to support large numbers.",
            "example": "13794442047246482254818"
          },
          "first_acquired": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when the holder first acquired tokens.",
            "example": "2025-02-06T15:11:07+00:00"
          },
          "has_initiated_transfer": {
            "type": "boolean",
            "description": "Indicates if the holder has initiated a transfer of these tokens.",
            "example": false
          }
        }
      },
      "TokenHoldersResponse": {
        "type": "object",
        "properties": {
          "token_address": {
            "type": "string",
            "format": "address",
            "description": "The address of the token contract.",
            "example": "0x63706e401c06ac8513145b7687a14804d17f814b"
          },
          "chain_id": {
            "type": "integer",
            "format": "int32",
            "description": "The identifier of the blockchain. For a full list see Supported Chains",
            "example": 8453
          },
          "holders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Holder"
            },
            "description": "A list of token holders and their balances."
          },
          "next_offset": {
            "type": "string",
            "nullable": true,
            "description": "An opaque token for fetching the next page of results. Null if no more results.",
            "example": "eyJvZmZzZXQiOjEwMH0="
          }
        }
      }
    },
    "securitySchemes": {
      "SimApiKeyHeader": {
        "type": "apiKey",
        "name": "X-Sim-Api-Key",
        "in": "header",
        "description": "API key for authenticating requests."
      }
    }
  },
  "paths": {
    "/v1/evm/token-holders/{chain_id}/{token_address}": {
      "get": {
        "summary": "Get Token Holders",
        "description": "Retrieves a list of token holders for a given token contract address on a specified blockchain.",
        "operationId": "getTokenHolders",
        "tags": [
          "EVM"
        ],
        "parameters": [
          {
            "name": "chain_id",
            "in": "path",
            "required": true,
            "description": "The identifier of the blockchain (e.g., 8453 for Base). For a full list see Supported Chains.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 8453
          },
          {
            "name": "token_address",
            "in": "path",
            "required": true,
            "description": "The address of the token contract.",
            "schema": {
              "type": "string",
              "format": "address",
              "pattern": "^0x[a-fA-F0-9]{40}$"
            },
            "example": "0x63706e401c06ac8513145b7687A14804d17f814b"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Maximum number of token holders to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            }
          },
          {
            "name": "next_offset",
            "in": "query",
            "required": false,
            "description": "Offset value for fetching the next page of results.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "SimApiKeyHeader": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of token holders for the specified token address on the specified chain.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenHoldersResponse"
                },
                "examples": {
                  "success": {
                    "value": {
                      "token_address": "0x63706e401c06ac8513145b7687a14804d17f814b",
                      "chain_id": 8453,
                      "holders": [
                        {
                          "wallet_address": "0x4a79b0168296c0ef7b8f314973b82ad406a29f1b",
                          "balance": "13794442047246482254818",
                          "first_acquired": "2025-02-06T15:11:07+00:00",
                          "has_initiated_transfer": false
                        },
                        {
                          "wallet_address": "0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B",
                          "balance": "25000000000000000000",
                          "first_acquired": "2024-01-15T10:30:00+00:00",
                          "has_initiated_transfer": true
                        }
                      ],
                      "next_offset": "eyJwYWdlIjoyLCJsaW1pdCI6Mn0="
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Malformed request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "badRequest": {
                    "value": {
                      "error": {
                        "message": "Verify the address format and other parameters in your request",
                        "code": "BAD_REQUEST"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "unauthorized": {
                    "value": {
                      "error": {
                        "message": "Invalid or missing API key",
                        "code": "UNAUTHORIZED"
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "notFound": {
                    "value": {
                      "error": {
                        "message": "Resource not found",
                        "code": "NOT_FOUND"
                      }
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Rate Limit Exceeded - Too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "rateLimitExceeded": {
                    "value": {
                      "error": {
                        "message": "Too many requests",
                        "code": "RATE_LIMIT_EXCEEDED"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server-side error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "internalServerError": {
                    "value": {
                      "error": {
                        "message": "Server-side error",
                        "code": "INTERNAL_SERVER_ERROR"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}