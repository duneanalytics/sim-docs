{
  "openapi": "3.0.0",
  "info": {
    "title": "Sim APIs Collectibles API",
    "version": "v1",
    "description": "API for retrieving EVM compatible collectible (NFT) balances, including IDs and metadata for a given address."
  },
  "servers": [
    {
      "url": "https://api.sim.dune.com",
      "description": "Sim API Server"
    }
  ],
  "components": {
    "schemas": {
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "Description of what went wrong.",
            "example": "invalid API Key"
          }
        },
        "required": [
          "error"
        ]
      },
      "CollectibleEntry": {
        "type": "object",
        "properties": {
          "contract_address": {
            "type": "string",
            "format": "address",
            "description": "The contract address of the collectible."
          },
          "token_standard": {
            "type": "string",
            "enum": ["ERC721", "ERC1155"],
            "description": "The token standard. Only ERC721 and ERC1155 are supported."
          },
          "token_id": {
            "type": "string",
            "description": "The token ID of the collectible."
          },
          "chain": {
            "type": "string",
            "description": "The blockchain name."
          },
          "chain_id": {
            "type": "integer",
            "format": "int32",
            "description": "The numeric EVM chain ID."
          },
          "name": {
            "type": "string",
            "description": "The name of the collectible."
          },
          "symbol": {
            "type": "string",
            "description": "The symbol of the collectible."
          },
          "description": {
            "type": "string",
            "description": "Description of the collectible."
          },
          "image_url": {
            "type": "string",
            "format": "uri",
            "description": "A URL that redirects to the image hosted by the collection or a CDN. Sim does not host images."
          },
          "last_sale_price": {
            "type": "string",
            "description": "The last sale price for this token ID, represented as a string."
          },
          "metadata": {
            "type": "object",
            "description": "Structured metadata for the token, resolved from the contract or its metadata URI. When present, it can include the original metadata URI and a list of normalized attributes. This object may be empty when no metadata is available.",
            "properties": {
              "uri": {
                "type": "string",
                "description": "Original metadata URI such as ipfs:// or an https URL."
              },
              "attributes": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "key": {
                      "type": "string",
                      "description": "Attribute name."
                    },
                    "value": {
                      "type": "string",
                      "description": "Attribute value."
                    },
                    "format": {
                      "type": "string",
                      "description": "Optional hint for interpreting the value (date, number, etc.)."
                    }
                  },
                  "required": ["key", "value"]
                }
              }
            }
          },
          "balance": {
            "type": "string",
            "description": "The balance of this specific token ID held by the address. For ERC721, this is typically '1'."
          },
          "last_acquired": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when this token ID was last acquired by the address."
          }
        },
        "required": [
          "contract_address",
          "token_standard",
          "token_id",
          "chain",
          "chain_id",
          "balance",
          "last_acquired"
        ]
      },
      "CollectiblesResponse": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "format": "address",
            "description": "The wallet address for which collectibles are being reported."
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CollectibleEntry"
            },
            "description": "A list of collectible entries."
          },
          "next_offset": {
            "type": "string",
            "description": "Use this value as the `offset` in your next request to continue pagination. Not included when there are no more entries."
          },
          "request_time": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the request was received."
          },
          "response_time": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the response was generated."
          }
        },
        "required": [
          "address",
          "entries",
          "request_time",
          "response_time"
        ]
      }
    }
  },
  "paths": {
    "/v1/evm/collectibles/{address}": {
      "get": {
        "summary": "Get EVM Collectibles",
        "description": "Retrieves a list of EVM compatible collectibles (NFTs) for a given wallet address.",
        "operationId": "getEvmCollectibles",
        "tags": [
          "EVM"
        ],
        "parameters": [
          {
            "name": "X-Sim-Api-Key",
            "in": "header",
            "required": true,
            "description": "Used for authenticating requests. Provide an API key with a purpose of `Sim API`. See [Authentication](/#authentication).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "address",
            "in": "path",
            "required": true,
            "description": "The wallet address to get collectibles for.",
            "schema": {
              "type": "string",
              "format": "address",
              "pattern": "^0x[a-fA-F0-9]{40}$",
              "default": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"
            },
            "example": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"
          },
          {
            "name": "chain_ids",
            "in": "query",
            "required": false,
            "description": "Filter by chain(s). Accepts a single numeric chain ID (e.g. `?chain_ids=1`), a single chain name (e.g. `?chain_ids=ethereum`), or a comma-separated list of either (e.g. `?chain_ids=1,137` or `?chain_ids=ethereum,polygon`). If omitted, results include collectibles from chains with the \"default\" tag for the address. See the [Supported Chains â€” Tags](/evm/supported-chains#tags) section.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "description": "Pagination cursor. Use the `next_offset` value from the previous response to get the next page. Omit to fetch the first page.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Maximum entries per page for collectibles. Default is 250 when not provided. Values above 500 are reduced to 500. If fewer entries exist than the limit, only the available entries are returned.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1,
              "maximum": 500,
              "default": 250
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of collectibles for the specified address.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CollectiblesResponse"
                },
                "examples": {
                  "success": {
                    "value": {
                      "address": "0xd8da6bf26964af9d7eed9e03e53415d37aa96045",
                      "entries": [
                        {
                          "contract_address": "0x344299dd2af8f81246dcb7b3368c6b9b5ddad4f6",
                          "token_standard": "ERC1155",
                          "token_id": "1",
                          "chain": "bnb",
                          "chain_id": 56,
                          "name": "launchspx org",
                          "metadata": null,
                          "balance": "1",
                          "last_acquired": "2025-08-11T04:22:52Z"
                        },
                        {
                          "contract_address": "0x5d28dcf2fbbd3738c0ebe9de03eafcb4ec33015d",
                          "token_standard": "ERC1155",
                          "token_id": "1",
                          "chain": "ethereum",
                          "chain_id": 1,
                          "name": "Beeplfg",
                          "description": "Beeplfg",
                          "symbol": "CRAP",
                          "image_url": "https://api.sim.dune.com/v1/evm/collectible/image/1/0x5d28dcf2fbbd3738c0ebe9de03eafcb4ec33015d/1",
                          "last_sale_price": "0",
                          "metadata": {
                            "uri": "ipfs://QmcnkkMnfL7fugsyrZPEZhPGciLMoo9kwWt1cg4QHLLx3w/0",
                            "attributes": [
                              { "key": "Color", "value": "255, 43, 163" },
                              { "key": "Stance", "value": "Greased" }
                            ]
                          },
                          "balance": "8",
                          "last_acquired": "2025-08-10T03:58:59Z"
                        },
                        {
                          "contract_address": "0x3c020f2124b84bd079985c77f93d4a750512448c",
                          "token_standard": "ERC721",
                          "token_id": "5132",
                          "chain": "ethereum",
                          "chain_id": 1,
                          "name": "Ethereum Puppet #5132",
                          "description": "Ethereum Puppet #5132",
                          "symbol": "PUPPET",
                          "image_url": "https://api.sim.dune.com/v1/evm/collectible/image/1/0x3c020f2124b84bd079985c77f93d4a750512448c/5132",
                          "last_sale_price": "0.00005",
                          "metadata": {
                            "uri": "https://www.ethereumpuppets.com/metadata/5132",
                            "attributes": [
                              { "key": "Background", "value": "Mustard" },
                              { "key": "Shirt", "value": "Gambler" }
                            ]
                          },
                          "balance": "1",
                          "last_acquired": "2025-08-09T23:07:47Z"
                        },
                        {
                          "contract_address": "0xa18cf489cf710759f13ac6c8596823dba85354e2",
                          "token_standard": "ERC721",
                          "token_id": "24",
                          "chain": "optimism",
                          "chain_id": 10,
                          "metadata": null,
                          "balance": "1",
                          "last_acquired": "2025-08-07T14:51:57Z"
                        }
                      ],
                      "next_offset": "opaque-pagination-token",
                      "request_time": "2025-08-13T09:40:53Z",
                      "response_time": "2025-08-13T09:40:53Z"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Malformed request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "badRequest": {
                    "value": {
                      "error": "Verify the address format and other parameters in your request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing API key.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "unauthorized": {
                    "value": {
                      "error": "Invalid API Key"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found - Resource not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "notFound": {
                    "value": {
                      "error": "URL Not Found"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Rate Limit Exceeded - Too many requests.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "rateLimitExceeded": {
                    "value": {
                      "error": "Too many requests"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - Server-side error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "internalServerError": {
                    "value": {
                      "error": "Server-side error"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "EVM",
      "description": "Endpoints related to EVM compatible blockchains."
    }
  ]
}